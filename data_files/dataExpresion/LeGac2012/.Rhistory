View(resCorrigido)
# linha=1
# for( linha in faixas) {
#   resCorrigido[nrow(resCorrigido)+1,]<-c(p.adjust(result[linha,2:ncol(result)]))
# }
resCorrigido[resCorrigido>pval]<-NA
#rm(list = ls())
type="High"
pval=0.001
quant=5
normalize = T
normBy = "count"
rank=200
tail="L"
fix= T
TsTv = "Ts"
Dw = "Cai"
top = 86
quiet=T
workdir = "/home/clovis/Doutorado/Projetos/Ecoli60/data_files/"
if(tail%in%c("L","H")){
tail<- (tail == "L")
}else{
stop('Use values "L" (Low) or "H" (High) for tail')
#return(0)
}
if(!TsTv%in%c("all","Ts","Tv")){
stop('Use values "all","Ts" (transitions), or "Tv" (transversions) for TsTv')
#return(0)
}
if(!Dw%in%c("Tai","Cai")){
stop('Use values "all","Ts" (transitions), or "Tv" (transversions) for TsTv')
}
if(normalize){
if(!normBy%in%c("CUB","count")){
stop('Normalizations can be done only by Codon Usage Bias ("CUB") or mutation count ("count")')
}
}
vTsTv<-TsTv
rankStd<-rank
setwd(workdir)
if(Dw == "Tai"){
deltaW<-read.csv("./AuxFiles/cDeltaWTAI.csv",
header = T,
stringsAsFactors = F)
#top is ignored when is a Tai Dw
top<-''
}else if(Dw == "Cai"){
deltaW<-readDeltaW(top,workdir)
}
codonUsage<-read.csv("./AuxFiles/dCodonUsage.csv",
header = T,
stringsAsFactors = F)
mutAllelAll<-read.csv(paste0("./base/a",type,"MutAllDW.csv"),
header = T,
stringsAsFactors = F)
#só syn
mutAllel<-mutAllelAll[mutAllelAll$Annotation == "synonymous",]
#remove stop codons
mutAllel<-mutAllel[!(mutAllel$ref == "TAA"| mutAllel$ref == "TGA"| mutAllel$ref == "TAG"),]
#atualize dw values
mutAllel<-merge(mutAllel,deltaW,
by=c("ref","mut"))
mutAllel$dw.x<-NULL
colnames(mutAllel)[135]<-"dw"
#filtra Ts ou Tv
if(TsTv != "all"){
TsTvdf<-read.csv("AuxFiles/TsTv.csv",
header = T,
stringsAsFactors = F)
deltaW<-merge(deltaW,
TsTvdf[c("ref","mut","type")],
by=c("ref","mut"))
deltaW<-subset(deltaW, type == vTsTv)
mutAllel<-subset(mutAllel, TsTv == vTsTv)
}
if(!fix%in%c("all",T,F) ){
cat('Argument "fix" must be TRUE, FALSE or "all".')
return()
}
if(fix!="all"){
if(fix){
mutAllel<-mutAllel[!is.na(mutAllel$fixed),]
}else{
mutAllel<-mutAllel[is.na(mutAllel$fixed),]
}
}
#ordena por posição
mutAllel<-mutAllel[order(mutAllel$Position),]
codons<-unique(mutAllel[,c("ref","mut")])
if(rank<0){
stop("Rank must be an integer or a number between 0 and 1.")
#return(0)
}else if(rank>=0 & rank <=1){
rankStd<- round(as.numeric(nrow(mutAllel))*as.numeric(rank),0)
}else{
rankStd<- round(rank,0)
}
if(!quiet){
cat("Using the top",rankStd,"frequencies \n")
}
top100Base<-mutAllel[,c(1:5,135)]#,2,127,128,3)]
#colnames(top100Base)<-c("Position","Gene","ref","mut","Allele")
#top100Base<-merge(top100Base,deltaW[,c(1,2,4)],by=c("ref","mut"))
top100Base<-merge(top100Base,codonUsage[,c(1,3)],by=c("ref"))
colnames(top100Base)[colnames(top100Base) == 'factorPerK'] <- 'factor'
#colnames(top100Base)<-c("ref","mut","Position","Gene","Allele","dw", "factor")
quantil<-quantile(deltaW$dw,c(seq(from = 0,to = 1,by = 1/quant)),type = 7)
if(!quiet){
cat("Levels: \n")
for (qn in 1:(length(quantil)-1)) {
if(qn==1){
limDown<-quantil[qn]-0.1
}else{
limDown<-quantil[qn]
}
#count just not 0
qtd<-nrow(deltaW[deltaW$dw>limDown &
deltaW$dw<=quantil[qn+1]&
deltaW$dw!=0,])
if(qn == ceiling(quant/2)){
#sum zeros here
msg<-paste0("\t",
qn,"-\t",
round(quantil[qn],2)," to ",
round(quantil[qn+1],2),"\t- ",qtd+nrow(deltaW[deltaW$dw==0,])," values\n")
}else{
msg<-paste0("\t",
qn,"-\t",
round(quantil[qn],2)," to ",
round(quantil[qn+1],2),"\t- ",qtd," values\n")
}
cat(msg)
}
}
vdw<-data.frame(min=round(quantil[seq(1,quant)],2),max=round(quantil[seq(2,quant+1)],2))
quantil[1]<-quantil[1]-0.1
for(i in 1:(length(quantil)-1)){
if(i == 1){
top100Base$faixa[top100Base$dw == quantil[1]]<-1
}
top100Base$faixa[top100Base$dw!=0 &
top100Base$dw> quantil[i] &
top100Base$dw<=quantil[i+1]]<-i
}
#put all dw = 0 at center
top100Base$faixa[top100Base$dw==0]<-ceiling(quant/2)
#garante a mesma ordem me mutAllel e top100Base
top100Base<-top100Base[order(top100Base$Position),c("Position","Gene","Allele","ref","mut","dw","factor","faixa")]
qtCount<-mutAllel[,c(1,7:128)]
qtCount[is.na(qtCount)]<-0
qtCount$sum<-apply(qtCount[,-1],
MARGIN = 1,
FUN = sum)
qtCount<-qtCount[qtCount$sum !=0,c("ref","sum")]
qtCount<-qtCount%>%
group_by(ref)%>%
summarize(tmpCol=n())
if(exists("result")){rm(result)}
#loop ----
col="X30000"
faixas<-seq(1:quant)
minFreq=Inf
for( col in colnames(mutAllel[7:128])){
rank<-rankStd
if(fix=="all"){
top100<-cbind(top100Base,mutAllel[,col])
}else if(fix){
tmpTime<-mutAllel[,col]
curTime<-strtoi(substr(col,2,nchar(col)))
tmpTime[curTime<mutAllel$t0]<-NA
top100<-cbind(top100Base,tmpTime)
}else{
top100<-cbind(top100Base,mutAllel[,col])
}
colnames(top100)<-c("Position","Gene","Allele","ref","mut","dw","factor","faixa","count")
#remove NA and -1 frequences and zeros
top100$count[top100$count == -1] <- NA
top100<-na.exclude(top100)
top100<-top100[top100$count>0,]
#top100$count<-top100$count-1e-10
if(nrow(top100)==0){
next()
}
if(normalize){
if(normBy =="CUB"){
#normalize observations
top100$cNorm<-apply(X = top100[,c("factor","count")],
MARGIN = 1,
FUN = function(x){
return(x[2]/x[1])
})
}else{
top100<-merge(top100,
qtCount,
by="ref")
top100$cNorm<-apply(X = top100[,c("tmpCol","count")],
MARGIN = 1,
FUN = function(x){
return(x[2]/x[1])
})
top100$tmpCol<-NULL
}
}else{
top100$cNorm<-top100$count
}
#    top100<-top100[top100$cNorm>0,]
# countsTot<-as.data.frame(table(top100[top100$cNorm>0,
#                                       c("faixa")]),
#                          stringsAsFactors = F)
countsTot<-as.data.frame(table(top100[c("faixa")]),
stringsAsFactors = F)
countsTot<-countsTot[countsTot$Freq!=0,]
colnames(countsTot)<- c("faixa","white")
countsTot$black<-nrow(top100)-countsTot$white
#colnames(top100)<-c("Position","Gene","Allele","ref","mut","dw","factor","faixa","count")
top<-top100$cNorm[order(top100$cNorm, decreasing = T)]
if(rank > length(top))
rank <- length(top)
if(top[rank] == 0){
top100<-top100[top100$cNorm>top[rank],]
}else{
top100<-top100[top100$cNorm>=top[rank],]
}
if(nrow(top100)==0){
next()
}
minFreq<-min(minFreq,top[rank])
counts100<-as.data.frame(table(top100[,c("faixa")]),stringsAsFactors = F)
#counts100<-counts100[counts100$Freq!=0,]
colnames(counts100)<-c("faixa","Freq")
#completa a tabela de counts com zeros
for (padrao in (faixas[!faixas%in%counts100$faixa])) {
counts100[nrow(counts100)+1,]<-c(padrao,0)
}
if(sum(counts100$Freq)-nrow(top100) !=0){
cat(col," fail!","\n")
next
}
counts100<-merge(counts100,countsTot,by=c("faixa"))
counts100$drawn<-nrow(top100)
counts100$hyp<-phyper(counts100$Freq,
counts100$white,
counts100$black,
counts100$drawn,
lower.tail = tail)
counts100<-counts100[, c("faixa","hyp")]
#adjust p-val
counts100$hyp<-p.adjust(counts100$hyp)
colnames(counts100)<-c("faixa",col)
if(exists("result")){
result<-merge(result,counts100,by=c("faixa"), all = T)
}else{
result<-counts100
}
}
if(!quiet){
cat("Minimal frequence used:", minFreq,"\n")
}
#resCorrigido<-result[0,2:ncol(result)]
resCorrigido<-result[,2:ncol(result)]
# linha=1
# for( linha in faixas) {
#   resCorrigido[nrow(resCorrigido)+1,]<-c(p.adjust(result[linha,2:ncol(result)]))
# }
resCorrigido[resCorrigido>pval]<-NA
View(resCorrigido)
#################
# main processing
#################
rm(list = ls())
baseDir="/home/clovis/Dropbox/Ecoli60/"
binDir=paste0(baseDir,"bin/")
workdir=paste0(baseDir,"data_files/")
setwd(workdir)
setwd(binDir)
source(paste0(binDir,"allFunctions.R"))
plotEnrDeplPVal(type="High",
pval=0.001,
quant=5,
normalize = T,
rank=100,
fix = T,
TsTv = "Ts",
title = T,
Dw = "Tai",
save=F,
workdir = workdir)
#depletion Cai
plotEnrDeplPVal(type="High",
pval=0.001,
quant=5,
normalize = T,
rank=200,
fix = T,
TsTv = "Ts",
title = T,
Dw = "Cai",
top = 86,
save=T,
figName = "Fig04",
workdir = workdir)
type="High"
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
if(!file.exists(paste0("./base/a",type,"MutAllDW.csv"))){
if(type == "HighLow"){
joinHighLow(workdir)
}else{
stop('Parameter "type" must be
\t"High" for High mutations rate populations;
\t"Low" for Low mutations rate populations;
\t"MutT" for MutT mutations populations; or
\t"HighLow" for High and Low mutations together.' )
#return(0)
}
}
file.exists(paste0("./base/a",type,"MutAllDW.csv"))
setwd(workdir)
file.exists(paste0("./base/a",type,"MutAllDW.csv"))
#################
# main processing
#################
rm(list = ls())
baseDir="/home/clovis/Dropbox/Ecoli60/"
binDir=paste0(baseDir,"bin/")
workdir=paste0(baseDir,"data_files/")
setwd(workdir)
setwd(binDir)
source(paste0(binDir,"allFunctions.R"))
#depletion Cai
plotEnrDeplPVal(type="High",
pval=0.001,
quant=5,
normalize = T,
rank=200,
fix = T,
TsTv = "Ts",
title = T,
Dw = "Cai",
top = 86,
save=T,
figName = "Fig04",
workdir = workdir)
#depletion Tai
plotEnrDeplPVal(type="High",
pval=0.001,
quant=5,
normalize = T,
rank=200,
fix = T,
TsTv = "Ts",
title = T,
Dw = "Tai",
top = 86,
save=T,
figName = "Fig03",
workdir = workdir)
mutAllelAll<-read.csv(paste0("./base/a",type,"MutAllDW.csv"),
header = T,
stringsAsFactors = F)
type="High"
mutAllelAll<-read.csv(paste0("./base/a",type,"MutAllDW.csv"),
header = T,
stringsAsFactors = F)
View(mutAllelAll)
#################
# main processing
#################
rm(list = ls())
baseDir="/home/clovis/Dropbox/Ecoli60/"
binDir=paste0(baseDir,"bin/")
workdir=paste0(baseDir,"data_files/")
setwd(workdir)
setwd(binDir)
source(paste0(binDir,"allFunctions.R"))
#depletion Cai
plotEnrDeplPVal(type="High",
pval=0.001,
quant=5,
normalize = T,
rank=200,
fix = T,
TsTv = "Ts",
title = T,
Dw = "Cai",
top = 86,
save=T,
figName = "Fig04",
workdir = workdir)
#depletion Tai
plotEnrDeplPVal(type="High",
pval=0.001,
quant=5,
normalize = T,
rank=200,
fix = T,
TsTv = "Ts",
title = T,
Dw = "Tai",
top = 86,
save=T,
figName = "Fig03",
workdir = workdir)
#################
# main processing
#################
rm(list = ls())
baseDir="/home/clovis/Dropbox/Ecoli60/"
binDir=paste0(baseDir,"bin/")
workdir=paste0(baseDir,"data_files/")
setwd(workdir)
setwd(binDir)
source(paste0(binDir,"allFunctions.R"))
#depletion Cai
plotEnrDeplPVal(type="High",
pval=0.001,
quant=5,
normalize = T,
rank=200,
fix = T,
TsTv = "Ts",
title = T,
Dw = "Cai",
top = 86,
save=T,
figName = "Fig04",
workdir = workdir)
source(paste0(binDir,"allFunctions.R"))
source(paste0(binDir,"allFunctions.R"))
source(paste0(binDir,"allFunctions.R"))
plotEnrRankRange(type="High",
pval=0.001,
quant=5,
normalize = T,
normBy = "count",
rankRange=c(50,1500,100),
fix = T,
TsTv = "Ts",
title = T,
Dw = "Tai",
top = 86,
save=F,
figName = "FigSXTaiTs",
workdir = workdir)
correlation()
mutPersist()
setwd(workdir)
deltaW<-readDeltaW(top,workdir)
codonUsage<-read.csv("dCodonUsage.csv",
header = T,
stringsAsFactors = F)
genesExpression()
listGenes(top = 86,
workdir = workdir)
read.csv(genesAll,
header = F,
stringsAsFactors = F)
setwd(workdir)
genesAll<-paste0("AuxFiles/listCai",4324,"Genes.csv")
if(!file.exists(genesAll)){
cat("Generating cDeltaW for all genes")
cmd<-paste0("cd ", workdir,";",
"cd ../bin;",
"python2.7 1.4CalculateDeltaWCAI.py ", 4324,";")
system(cmd)
}
genesList<-read.csv(genesAll,
header = F,
stringsAsFactors = F)
View(genesList)
riboAll=nrow(genesList[grep("ribosomal",genesList$V2,ignore.case = T),])
membAll=nrow(genesList[grep("membrane",genesList$V2,ignore.case = T),])
elongAll=nrow(genesList[grep("elongation factor",genesList$V2,ignore.case = T),])
genes<-paste0("AuxFiles/listCai",top,"Genes.csv")
top=10
genes<-paste0("AuxFiles/listCai",top,"Genes.csv")
if(!file.exists(genes)){
cat("Generating cDeltaW top ",top)
cmd<-paste0("cd ", workdir,";",
"cd ../bin;",
"python2.7 1.4CalculateDeltaWCAI.py ", top,";")
system(cmd)
}
topGenes<-read.csv(genes,
header = F,
stringsAsFactors = F)
View(topGenes)
expression<-genesExpression()
View(expression)
listGenes(top = 2000,
workdir = workdir)
listGenes(top = 2000,
workdir = workdir)
listGenes(top = 2001,
workdir = workdir)
genesExpression()
expression<-genesExpression()
View(expression)
nrow(expression)
expression$x<-seq(1,nrow(expression),1)
View(expression)
library(ggplot2)
ggplot()+theme_bw()+
geom_line(data = expression,
aes(x=x, y=median))
ggplot()+theme_bw()+
geom_line(data = expression,
aes(x=x, y=median),
col="blue")
